{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b493728.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`} />\r\n                </h5>\r\n\r\n                {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n\r\n                {/**show max and min temp */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\nexport default Weather","import React from 'react';\r\nimport './form.style.css'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"CITY(no Caps)\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country(no Caps)\" />\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 py-1 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form><br/><br/><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react'\nimport './App.css'\nimport Weather from './app_component/weather.component'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'weather-icons/css/weather-icons.css'\nimport Form from './app_component/form.component'\n\nconst API_key = \"fa79db890b0c1fd0215fbfa503465cc9\";\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n        case rangeId >= 200 && rangeId <=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n\n        case rangeId >= 300 && rangeId <=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n\n        case rangeId >= 500 && rangeId <=532:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n\n        case rangeId >= 600 && rangeId <=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n\n        case rangeId >= 701 && rangeId <=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n\n        case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n\n        case rangeId >= 801 && rangeId <=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n\n        default:this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async(e)=> {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country){\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    \n    const response = await api_call.json();\n  \n    console.log(response);\n\n    this.setState({\n      city:`${response.name}, ${response.sys.country}`,\n      country:response.sys.country,\n      celsius:this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      error:false\n    });\n\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n    }\n    else{\n      this.setState({error:true});\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius} \n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}